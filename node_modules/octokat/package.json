{
  "_args": [
    [
      {
        "raw": "octokat",
        "scope": null,
        "escapedName": "octokat",
        "name": "octokat",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mobitar/Desktop/github-push"
    ]
  ],
  "_from": "octokat@latest",
  "_id": "octokat@0.9.0",
  "_inCache": true,
  "_location": "/octokat",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/octokat-0.9.0.tgz_1496549889594_0.548890027217567"
  },
  "_npmUser": {
    "name": "philschatz",
    "email": "phil@cnx.org"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "octokat",
    "scope": null,
    "escapedName": "octokat",
    "name": "octokat",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/octokat/-/octokat-0.9.0.tgz",
  "_shasum": "4c4807d16ff8e6b8a82dac389aa2b99ac50496c1",
  "_shrinkwrap": null,
  "_spec": "octokat",
  "_where": "/Users/mobitar/Desktop/github-push",
  "author": {
    "name": "Philip Schatz"
  },
  "browser": {
    "./dist/node/adapters/fetch-node.js": "./dist/node/adapters/fetch-browser.js",
    "./dist/node/adapters/base64-node.js": "./dist/node/adapters/base64-browser.js"
  },
  "bugs": {
    "url": "https://github.com/philschatz/octokat.js/issues"
  },
  "dependencies": {
    "fetch-vcr": "^0.5.1",
    "lodash": "^4.16.4",
    "node-fetch": "^1.6.3"
  },
  "description": "Javascript GitHub client for NodeJS or a browser using promises or callbacks",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.16.0",
    "babel-loader": "^7.0.0",
    "babel-preset-es2015": "^6.16.0",
    "chai": "~3.5.0",
    "codecov": "^2.0.1",
    "coffee-script": "^1.12.1",
    "coffeelint": "^1.15.7",
    "es6-promise": "4.1.0",
    "eslint": "^3.7.0",
    "eslint-config-standard": "^8.0.0",
    "eslint-plugin-promise": "^3.4.0",
    "eslint-plugin-standard": "^3.0.0",
    "glob": "^7.1.1",
    "http-server": "^0.10.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.2",
    "mocha-phantomjs-core": "^2.1.1",
    "octokat-fixtures": "git://github.com/philschatz/octokat-fixtures.git",
    "parallelshell": "^2.0.0",
    "phantomjs-prebuilt": "^2.1.14",
    "remap-istanbul": "^0.9.0",
    "snazzy": "^6.0.0",
    "standard": "^9.0.0",
    "webpack": "^2.3.1",
    "whatwg-fetch": "^2.0.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "4c4807d16ff8e6b8a82dac389aa2b99ac50496c1",
    "tarball": "https://registry.npmjs.org/octokat/-/octokat-0.9.0.tgz"
  },
  "gitHead": "3ba95a49953bf1d5bc7a9b0687a43c785abe3fb5",
  "homepage": "https://github.com/philschatz/octokat.js",
  "keywords": [
    "javascript",
    "github",
    "client",
    "promise",
    "ender"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "philschatz",
      "email": "phil@cnx.org"
    }
  ],
  "name": "octokat",
  "optionalDependencies": {},
  "readme": "# Octokat.js\n[![gh-board][kanban-image]][kanban-url]\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][downloads-url]\n[![build status][travis-image]][travis-url]\n[![dependency status][dependency-image]][dependency-url]\n[![dev dependency status][dev-dependency-image]][dev-dependency-url]\n[![code coverage][coverage-image]][coverage-url]\n\n\n[Try it out in your browser!](https://tonicdev.com/npm/octokat) (REPL)\n\nOctokat.js provides a minimal higher-level wrapper around [GitHub's API](https://developer.github.com).\nIt is being developed in the context of an [EPUB3 Textbook editor for GitHub](https://github.com/oerpub/github-bookeditor)\n and a [simple serverless kanban board](https://github.com/philschatz/gh-board) ([demo](http://philschatz.com/gh-board)). It is also [used](https://github.com/desktop/desktop/blob/master/app/package.json#L32) in the [official github desktop client](https://desktop.github.com/)!\n\nThis package can be used in `nodejs` **or** in the browser as an AMD module or using browserify.\n\n# Table of Contents\n\n- [Install](#install)\n- [Key Features](#key-features)\n- [Overview](#overview)\n- [Examples](#examples)\n  - [Chaining](#chaining)\n  - [Promises or Callbacks](#promises-or-callbacks)\n  - [Read/Write/Remove a File](#readwriteremove-a-file)\n- [Usage](#usage)\n  - [In a Browser](#in-a-browser)\n  - [In Node.js](#in-nodejs)\n  - [Setup](#setup)\n    - [Promises (Optional)](#promises-optional)\n- [Advanced](#advanced-uses)\n  - [Hypermedia](#hypermedia)\n  - [Paged Results](#paged-results)\n  - [Preview new APIs](#preview-new-apis)\n  - [Enterprise APIs](#enterprise-apis)\n  - [Using EcmaScript 6 Generators](#using-ecmascript-6-generators)\n  - [Uploading Releases](#uploading-releases)\n  - [Parsing JSON](#parsing-json)\n  - [Using URLs Directly](#using-urls-directly)\n  - [Development](#development)\n\n# Install\n\nOctokat runs in [node](https://nodejs.org) or a browser and is available in [npm](https://npmjs.com/package/octokat).\n\n```sh\nnpm install --save octokat\n```\n\n# Key Features\n\n- Works in `nodejs`, an AMD module in the browser, and as a [bower](https://github.com/bower/bower) library\n- Handles text _and_ binary files\n- Exposes everything available via the GitHub API (repos, teams, events, hooks, emojis, etc.)\n- Supports `ETag` caching\n- Paged results\n- Node-style callbacks as well as optional Promises (to avoid those debates)\n- 100% of the GitHub API\n  - Starring and Following repositories, users, and organizations\n  - Editing Team and Organization Membership\n  - User/Org/Repo events and notifications\n  - Listeners for rate limit changes\n  - Public Keys\n  - Hooks (commit, comment, etc.)\n  - Uses native Promises if available\n  - Markdown generation\n  - Preview APIs (Deployments, Teams, Licenses, etc)\n  - Enterprise APIs\n\nFor the full list of supported methods see [./src/grammar/](./src/grammar/), [./examples/](./examples/), [Travis tests](https://travis-ci.org/philschatz/octokat.js),\nor the [./test](./test/) directory.\n\n# Overview\n\nThis library closely mirrors the <https://developer.github.com/v3> documentation.\n\nFor example:\n\n```js\n// `GET /repos/:owner/:repo` in the docs becomes:\nocto.repos(owner, repo).fetch()\n\n// `POST /repos/:owner/:repo/issues/:number/comments` becomes:\nocto.repos(owner, repo).issues(number).comments.create(params)\n```\n\nThe last method should be a *verb method*.\nThe verb method makes the async call and should either have a callback as the last argument\nor it returns a Promise (see [Promises or Callbacks](#promises-or-callbacks)).\n\nThe basic structure of the *verb method* is:\n\n- `.foos.fetch({optionalStuff:...})` yields a list of items (possibly paginated)\n- `.foos(id).fetch(...)` yields a single item (issue, repo, user)\n- `.foos.create(...)` creates a new `foo`\n- `.foos(id).update(...)` updates an existing `foo`\n- `.foos(id).add()` adds an existing User/Repo (`id`) to the list\n- `.foos(id).remove()` removes a member from a list or deletes the object and yields a boolean indicating success\n- `.foos.contains(id)` tests membership in a list (yields true/false)\n- `.foos(id).read()` is similar to `.fetch()` but yields the text contents without the wrapper JSON\n- `.foos(id).readBinary()` is similar to `.read()` but yields binary data\n\n\n# Examples\n\nBelow are some examples for using the library.\nFor a semi-autogenerated list of more examples see [./examples/](./examples/).\n\n\n## Chaining\n\nYou construct the URL by chaining properties and methods together\nand an async call is made once a verb method is called (see below).\n\n```js\nocto = new Octokat()\nrepo = octo.repos('philschatz', 'octokat.js')\n// Check if the current user is a collaborator on a repo\nrepo.collaborators.contains(USER)\n.then((isCollaborator) => {\n  // If not, then star the Repo\n  if (!isCollaborator) {\n    repo.star.add()\n    .then(() => {\n      // Done!\n    })\n  }\n})\n```\n\nOr, update a specific comment:\n\n```js\nocto = new Octokat({token: ...})\nocto.repos('philschatz', 'octokat.js').issues(1).comments(123123).update({body: 'Hello'})\n.then(() => {\n  // Done!\n})\n```\n\n\n## Promises or Callbacks\n\nThis library supports Node.js-style callbacks as well as Promises.\n\nTo use a callback, just specify it as the last argument to a method.\nTo use a Promise, do not specify a callback and the return value will be a Promise.\n\nExample (get information on a repo):\n\n```js\n// Using callbacks\nocto.repos('philschatz', 'octokat.js').fetch((err, repo) => {\n  if (err) console.error(err)\n  // Do fancy stuff...\n})\n\n// Using Promises\nocto.repos('philschatz', 'octokat.js').fetch()\n.then((repo) => {\n  // Do fancy stuff\n}).then(null, (err) => console.error(err))\n```\n\n\n## Read/Write/Remove a File\n\nTo read the contents of a file:\n\n```js\nvar octo = new Octokat()\nvar repo = octo.repos('philschatz', 'octokat.js')\nrepo.contents('README.md').read() // Use `.read` to get the raw file.\n.then((contents) => {        // `.fetch` is used for getting JSON\n  console.log(contents)\n});\n```\n\nTo read the contents of a binary file:\n\n```js\nvar octo = new Octokat()\nvar repo = octo.repos('philschatz', 'octokat.js')\nrepo.contents('README.md').readBinary() // Decodes the Base64-encoded content\n.then((contents) => {\n  console.log(contents)\n})\n```\n\nTo read the contents of a file and JSON metadata:\n\n```js\nvar octo = new Octokat()\nvar repo = octo.repos('philschatz', 'octokat.js')\nrepo.contents('README.md').fetch()\n.then((info) => {\n  console.log(info.sha, info.content)\n})\n```\n\nTo update a file you need the **blob SHA** of the previous commit:\n\n```js\nvar octo = new Octokat({token: 'API_TOKEN'})\nvar repo = octo.repos('philschatz', 'octokat.js')\nvar config = {\n  message: 'Updating file',\n  content: base64encode('New file contents'),\n  sha: '123456789abcdef', // the blob SHA\n  // branch: 'gh-pages'\n}\n\nrepo.contents('README.md').add(config)\n.then((info) => {\n  console.log('File Updated. new sha is ', info.commit.sha)\n})\n```\n\nCreating a new file is the same as updating a file but the `sha` field in the config is omitted.\n\nTo remove a file:\n\n```js\nvar octo = new Octokat({token: 'API_TOKEN'})\nvar repo = octo.repos('philschatz', 'octokat.js')\nvar config = {\n  message: 'Removing file',\n  sha: '123456789abcdef',\n  // branch: 'gh-pages'\n}\n\nrepo.contents('README.md').remove(config)\n.then(() => {\n  console.log('File Updated')\n});\n```\n\n# Usage\n\nAll asynchronous methods accept a Node.js-style callback\n**and** return a [Common-JS Promise](http://wiki.commonjs.org/wiki/Promises/A).\n\n## In a Browser\n\nCreate an Octokat instance.\n\n```js\nvar octo = new Octokat({\n  username: \"USER_NAME\",\n  password: \"PASSWORD\"\n})\n\nvar cb = function (err, val) { console.log(val) }\n\nocto.zen.read(cb)\nocto.repos('philschatz', 'octokat.js').fetch(cb) // Fetch repo info\nocto.me.starred('philschatz', 'octokat.js').add(cb) // Star a repo\n```\n\nOr if you prefer OAuth:\n\n```js\nvar octo = new Octokat({\n  token: \"OAUTH_TOKEN\"\n})\n```\n\n## In a browser using RequireJS\n\n```js\ndefine(['octokat'], (Octokat) => {\n  var octo = new Octokat({\n    username: \"YOU_USER\",\n    password: \"YOUR_PASSWORD\"\n  })\n})\n```\n\n## In Node.js\n\nInstall instructions:\n\n```sh\nnpm install octokat --save\n```\n\n```js\nvar Octokat = require('octokat')\nvar octo = new Octokat({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\"\n})\n\n// You can omit `cb` and use Promises instead\nvar cb = function (err, val) { console.log(val) }\n\nocto.zen.read(cb)\nocto.repos('philschatz', 'octokat.js').fetch(cb)    // Fetch repo info\nocto.me.starred('philschatz', 'octokat.js').add(cb) // Star a repo\nocto.me.starred('philschatz', 'octokat.js').remove(cb) // Un-Star a repo\n```\n\n## Using bower\n\nThis file can be included using the bower package manager:\n\n```sh\nbower install octokat --save\n```\n\n## Setup\n\nThis is all you need to get up and running:\n\n```html\n<script src=\"../dist/octokat.js\"></script>\n<script>\n  var octo = new Octokat()\n  octo.zen.read((err, message) => {\n    if (err) { throw new Error(err) }\n    alert(message)\n  })\n</script>\n```\n\n\n# Advanced Uses\n\n\n## Hypermedia\n\nGitHub provides URL patterns in its JSON responses. These are automatically converted into methods.\nYou can disable this by setting `disableHypermedia: true` in the options when creating a `new Octokat(...)`.\n\nFor example:\n\n```js\nocto.repos('philschatz', 'octokat.js').fetch()\n.then((repo) => {\n  // GitHub returns a JSON which contains something like compare_url: 'https://..../compare/{head}...{base}\n  // This is converted to a method that accepts 2 arguments\n  repo.compare(sha1, sha2).fetch()\n  .then((comparison) => console.log('Done!'))\n})\n```\n\n## Paged Results\n\nIf a `.fetch()` returns paged results then `nextPage()`, `previousPage()`, `firstPage()`\nand `lastPage()` are added to the returned Object. For example:\n\n```js\nocto.repos('philschatz', 'octokat.js').commits.fetch()\n.then((someCommits) => {\n  someCommits.nextPage()\n  .then((moreCommits) => {\n    console.log('2nd page of results', moreCommits)\n  })\n})\n```\nAs standard with the Github API, passing a `per_page` parameter allows you to control the number of results per page. For example:\n\n```js\nocto.repos('philschatz', 'octokat.js').issues.fetch({per_page: 100})\n  .then(...)\n```\n\n## Preview new APIs\n\nOctokat will send the Preview Accept header by default for several Preview APIs.\n\nIf you want to change this behavior you can force an `acceptHeader` when instantiating Octokat.\n\nFor example:\n\n```js\nvar octo = new Octokat({\n  token: 'API_TOKEN',\n  acceptHeader: 'application/vnd.github.cannonball-preview+json'\n})\n```\n\n## Enterprise APIs\n\nTo use the Enterprise APIs add the root URL when instantiating Octokat:\n\n```js\nvar octo = new Octokat({\n  token: 'API_TOKEN',\n  rootURL: 'https://example.com/api/v3'\n})\n```\n\n## Using EcmaScript 6 Generators\n\nThis requires Node.js 0.11 with the `--harmony-generators` flag:\n\n```js\nvar Octokat = require('octokat')\nvar octo = new Octokat()\n\nvar zen  = yield octo.zen.read()\nvar info = yield octo.repos('philschatz', 'octokat.js').fetch()\n\nconsole.log(zen)\nconsole.log(info)\n```\n\n## Uploading Releases\n\nUploading release assets requires a slightly different syntax because it\ninvolves setting a custom contentType and providing a possibly binary payload.\n\nTo upload (tested using nodejs) you can do the following:\n\n```js\nvar contents = fs.readFileSync('./build.js')\n\nrepo.releases(123456).fetch()\n.then((release) => {\n\n  release.upload('build.js', 'application/javascript', contents)\n    .then((resp) => {\n      // Success!\n    })\n})\n```\n\n## Parsing JSON\n\nIf you are using webhooks, the JSON returned by GitHub can be parsed using\n`octo.parse(json)` to yield a rich object with all the methods Octokat provides.\n\n`octo.parse(json)` is asynchronous and can take either a callback or returns a promise.\n\n## Using URLs Directly\n\nInstead of using Octokat to construct URLs, you can construct them yourself and\nstill use Octokat for sending authentication information, caching, pagination,\nand parsing Hypermedia.\n\n```js\n// Specify the entire URL\nocto.fromUrl('https://api.github.com/repos/philschatz/octokat.js/issues/1').fetch(cb)\n\n// Or, just the path\nocto.fromUrl('/repos/philschatz/octokat.js/issues').fetch({state: 'open'}, cb)\n```\n\nIf the URL is a Hypermedia Template then you can fill in the fields by passing them in as an additional argument.\n\n```js\nparams = {\n  owner: 'philschatz'\n  repo: 'octokat.js'\n  name: 'dist.js'\n}\nocto.fromUrl('https://uploads.github.com/repos/{owner}/{repo}/releases{/id}/assets{?name}', params)\n// returns https://uploads.github.com/repos/philschatz/octokat.js/releases/assets?name=dist.js\n```\n\n## Development\n\n- Run `npm install`\n- Run `npm test` to run Mocha tests for Node.js and the browser\n- Run `grunt dist` to generate the files in the `./dist` directory\n\nThe unit tests are named to illustrate examples of using the API.\nSee [Travis tests](https://travis-ci.org/philschatz/octokat.js) or run `npm test` to see them.\n\n[fetch-vcr](https://github.com/philschatz/fetch-vcr) is used to generate recorded HTTP fixtures from GitHub.\nIf you are adding tests be sure to include the updated fixtures in the Pull Request.\n\n\n## Todo\n- Add Option for Two factor authentication\n- Add option to pass header as cache control: no cache\n\n\n[kanban-image]: https://img.shields.io/github/issues/philschatz/octokat.js.svg?label=kanban%20board%20%28gh-board%29\n[kanban-url]: http://philschatz.com/gh-board/#/r/philschatz:octokat.js\n[npm-image]: https://img.shields.io/npm/v/octokat.svg\n[npm-url]: https://npmjs.org/package/octokat\n[downloads-image]: http://img.shields.io/npm/dm/octokat.svg\n[downloads-url]: https://npmjs.org/package/octokat\n[travis-image]: https://img.shields.io/travis/philschatz/octokat.js.svg\n[travis-url]: https://travis-ci.org/philschatz/octokat.js\n[dependency-image]: https://img.shields.io/david/philschatz/octokat.js.svg\n[dependency-url]: https://david-dm.org/philschatz/octokat.js\n[dev-dependency-image]: https://img.shields.io/david/dev/philschatz/octokat.js.svg\n[dev-dependency-url]: https://david-dm.org/philschatz/octokat.js#info=devDependencies\n[coverage-image]: https://img.shields.io/codecov/c/github/philschatz/octokat.js.svg\n[coverage-url]: https://codecov.io/gh/philschatz/octokat.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/philschatz/octokat.js.git"
  },
  "scripts": {
    "build": "npm run-script dist",
    "bump": "grunt release",
    "debug-node": "VCR_MODE=$(echo ${VCR_MODE} || cache) mocha --inspect --debug-brk --reporter spec ./test-transpiled/**/node**.js",
    "dist": "babel --source-maps true --out-dir ./dist/node/ ./src/",
    "lint": "standard *.js src/**.js | snazzy && coffeelint --file ./coffeelint.json src/**/*.coffee",
    "postdist": "webpack --config ./webpack.config-browser.js --progress",
    "posttest": "npm run-script lint",
    "predebug-node": "babel --source-maps true --source-root ./index.js ./test/ -d ./test-transpiled/",
    "predist": "coffee --map --compile ./src/grammar/*.coffee",
    "pretest": "npm run-script build",
    "pretest-browser": "webpack --config ./webpack.config-browsertests.js",
    "pretest-node-with-coverage": "npm run-script predebug-node",
    "test": "npm run-script test-node-with-coverage && npm run-script test-browser",
    "test-browser": "./script/run-test-browser.sh",
    "test-browser:only": "phantomjs ./node_modules/mocha-phantomjs-core/mocha-phantomjs-core.js http://localhost:9876/test/index.html spec '{\"timeout\": 20000 }'",
    "test-node-with-coverage": "VCR_MODE=$(echo ${VCR_MODE} || cache) istanbul cover --report json _mocha -- --reporter spec ./test-transpiled/**/node**.js",
    "update": "bower update"
  },
  "tonicExampleFilename": "examples/tonic-example.js",
  "version": "0.9.0"
}
