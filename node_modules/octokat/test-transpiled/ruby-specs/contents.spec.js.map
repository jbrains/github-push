{"version":3,"sources":["../../test/ruby-specs/contents.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_repo","btoa","window","global","str","buffer","toString","Error","describe","timeout","it","repos","readme","read","then","contents","context","beforeEach","done","removeFile","content","config","sha","message","remove","fetch","repo","defaultBranch","branches","commit","add","err","console","log","response","to","match","response2","url","is","a"],"mappings":"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","file":"contents.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_repo } = require('../test-config')\n\n// NodeJS does not have a btoa\nlet btoa = null\n\nif (typeof window !== 'undefined' && window !== null) {\n  btoa = window.btoa\n  // Use the `Buffer` if available (NodeJS)\n} else if (typeof global !== 'undefined' && global !== null) {\n  btoa = function (str) {\n    var buffer = new global['Buffer'](str, 'binary')\n    return buffer.toString('base64')\n  }\n} else {\n  throw new Error('Native btoa function or Buffer is missing')\n}\n\ndescribe('Contents', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  it('returns the default readme', () =>\n    client.repos('octokit/octokit.rb').readme.read()\n    .then(function (readme) {})\n  )\n      // expect(readme.encoding).to.equal(\"base64\")\n      // expect(readme.type).to.equal(\"file\")\n\n  it('returns the contents of a file', () =>\n    client.repos('octokit/octokit.rb').contents('lib/octokit.rb').read()\n    .then(function (contents) {})\n  )\n      // expect(contents.encoding).to.equal(\"base64\")\n      // expect(contents.type).to.equal(\"file\")\n\n  // it \"returns the headers of the request\", ->\n  //   client.repos('octokit/octokit.rb').tarball('master').fetch()\n  //   .then(null, (err) -> console.log err)\n  //   .then (archive_link) ->\n  //     expect(archive_link).to.equal('https://codeload.github.com/octokit/octokit.rb/legacy.tar.gz/master')\n\n  context('With a file', function () {\n    beforeEach(function (done) {\n      let removeFile = function (content) {\n        let config = {\n          sha: content.sha,\n          message: 'Removing as prep for testing'\n        }\n        return client.repos(test_repo).contents('test_create.txt').remove(config).then(() => done())\n      }\n\n      // If the file exists, remove it. Otherwise, done.\n      client.repos(test_repo).contents('test_create.txt').fetch()\n      /* eslint handle-callback-err: \"off\" */\n      .then(removeFile, err => done())\n\n      // In Mocha 3, if the returned value is a promise then it will complain that\n      // we have specified a done() callback _and_ returned a promise.\n      // So, since this test should always succeed even if there is no file (to delete)\n      // just return null so Mocha does not complain.\n      return null\n    })\n\n    it('creates repository contents at a path', () => {\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_create.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n            return expect(response.commit.sha).to.match(/[a-z0-9]{40}/)\n          })\n        })\n      })\n    })\n\n    it('updates repository contents at a path', () => {\n      // Prep work (from previous test)\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_create.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n\n            // Test Start\n            let config = {\n              sha: response.content.sha,\n              message: 'I am commit-ing',\n              content: btoa('Here be moar content')\n            }\n            return client.repos(test_repo).contents('test_create.txt').add(config)\n            .then(response2 => {\n              return expect(response2.commit.sha).to.match(/[a-z0-9]{40}/)\n            })\n          })\n        })\n      })\n    })\n\n    it('deletes repository contents at a path', () => {\n      // Prep work (from previous test)\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_create.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n            expect(response.commit.sha).to.match(/[a-z0-9]{40}/)\n\n            // Test Start\n            let config = {\n              sha: response.content.sha,\n              message: 'I am rm-ing'\n            }\n            return client.repos(test_repo).contents('test_create.txt').remove(config)\n            .then(function (response) {\n              expect(response.url).is.a('string')\n            })\n          })\n        })\n      })\n    })\n  })\n})\n\n// TODO: have a non-boolean form of remove()\n// expect(response.commit.sha).to match(/[a-z0-9]{40}/)\n"]}